{"ast":null,"code":"import React,{useState,useRef}from\"react\";import Arrow from\"../assets/arrow/arrow.svg\";import\"../style/Collapse.scss\";// Le composant Collapse prend un titre (collapseTitle) et un contenu (children) en tant que props\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Collapse(_ref){let{collapseTitle,children}=_ref;// Utilisation du hook useState pour gérer l'état \"open\" qui indique si le contenu est visible ou non\nconst[open,setOpen]=useState(false);// Fonction pour basculer l'état \"open\" lorsqu'on clique sur le titre\nconst toggle=()=>{setOpen(!open);};// Utilisation du hook useRef pour obtenir une référence directe à l'élément DOM contenant le contenu du collapse\nconst contentRef=useRef();return/*#__PURE__*/_jsxs(\"div\",{className:\"collapse-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"collapse-title\",onClick:toggle,children:[collapseTitle,\" \",/*#__PURE__*/_jsx(\"button\",{className:\"button\",\"aria-expanded\":open?\"true\":\"false\"// Attribut ARIA pour indiquer l'état du collapse\n,\"aria-controls\":\"collapse-parent\"// Attribut ARIA pour indiquer l'élément contrôlé\n,\"aria-label\":\"open this collapse\"// Attribut ARIA pour donner une description accessible du bouton\n,children:/*#__PURE__*/_jsx(\"img\",{src:Arrow,className:\"Arrow \".concat(open?\"down\":\"\")// Applique la classe \"down\" si le collapse est ouvert\n,alt:\"Ouvrir l'article\"})})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"collapse-parent\"// Affiche ou masque le contenu selon l'état \"open\"\n,className:open?\"collapse-parent show\":\"collapse-parent hide\"// Référence à l'élément DOM pour calculer dynamiquement la hauteur\n,ref:contentRef,style:open?{height:contentRef.current.scrollHeight+\"px\"}// Si ouvert, définit la hauteur selon le contenu\n:{height:\"0px\"}// Si fermé, la hauteur est 0\n,children:[/*#__PURE__*/_jsx(\"div\",{className:\"collapse-content\",children:children}),\" \"]})]});}export default Collapse;","map":{"version":3,"names":["React","useState","useRef","Arrow","jsx","_jsx","jsxs","_jsxs","Collapse","_ref","collapseTitle","children","open","setOpen","toggle","contentRef","className","onClick","src","concat","alt","id","ref","style","height","current","scrollHeight"],"sources":["/Users/marwaderbel/workspace/P5/src/components/Collapse.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport Arrow from \"../assets/arrow/arrow.svg\";\nimport \"../style/Collapse.scss\";\n\n// Le composant Collapse prend un titre (collapseTitle) et un contenu (children) en tant que props\nfunction Collapse({ collapseTitle, children }) {\n\n  // Utilisation du hook useState pour gérer l'état \"open\" qui indique si le contenu est visible ou non\n  const [open, setOpen] = useState(false); \n\n  // Fonction pour basculer l'état \"open\" lorsqu'on clique sur le titre\n  const toggle = () => {\n    setOpen(!open);\n  };\n  // Utilisation du hook useRef pour obtenir une référence directe à l'élément DOM contenant le contenu du collapse\n  const contentRef = useRef();\n\n  return (\n    <div className=\"collapse-container\">\n        {/* Titre du collapse qui déclenche l'ouverture ou la fermeture */}\n      <div className=\"collapse-title\" onClick={toggle}>\n\n        {collapseTitle} {/* Affiche le titre passé en tant que prop */}\n        \n        <button className=\"button\"\n          aria-expanded={open ? \"true\" : \"false\"} // Attribut ARIA pour indiquer l'état du collapse\n          aria-controls=\"collapse-parent\" // Attribut ARIA pour indiquer l'élément contrôlé\n          aria-label=\"open this collapse\" // Attribut ARIA pour donner une description accessible du bouton\n        >\n          <img\n            src={Arrow}\n            className={`Arrow ${open ? \"down\" : \"\"}`} // Applique la classe \"down\" si le collapse est ouvert\n            alt=\"Ouvrir l'article\"  \n          />\n        </button>\n      </div>\n\n      <div\n        id=\"collapse-parent\"\n        // Affiche ou masque le contenu selon l'état \"open\"\n        className={open ? \"collapse-parent show\" : \"collapse-parent hide\"} \n        // Référence à l'élément DOM pour calculer dynamiquement la hauteur\n        ref={contentRef} \n        style={\n          open\n            ? { height: contentRef.current.scrollHeight + \"px\" } // Si ouvert, définit la hauteur selon le contenu\n            : { height: \"0px\" } // Si fermé, la hauteur est 0\n        }\n      >\n        <div className=\"collapse-content\">{children}</div> {/* Affichage du contenu passé en tant qu'enfant */}\n      </div>\n    </div>\n  );\n}\n\nexport default Collapse;\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,MAAM,KAAQ,OAAO,CAC/C,MAAO,CAAAC,KAAK,KAAM,2BAA2B,CAC7C,MAAO,wBAAwB,CAE/B;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,QAAS,CAAAC,QAAQA,CAAAC,IAAA,CAA8B,IAA7B,CAAEC,aAAa,CAAEC,QAAS,CAAC,CAAAF,IAAA,CAE3C;AACA,KAAM,CAACG,IAAI,CAAEC,OAAO,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAEvC;AACA,KAAM,CAAAa,MAAM,CAAGA,CAAA,GAAM,CACnBD,OAAO,CAAC,CAACD,IAAI,CAAC,CAChB,CAAC,CACD;AACA,KAAM,CAAAG,UAAU,CAAGb,MAAM,CAAC,CAAC,CAE3B,mBACEK,KAAA,QAAKS,SAAS,CAAC,oBAAoB,CAAAL,QAAA,eAEjCJ,KAAA,QAAKS,SAAS,CAAC,gBAAgB,CAACC,OAAO,CAAEH,MAAO,CAAAH,QAAA,EAE7CD,aAAa,CAAC,GAAC,cAEhBL,IAAA,WAAQW,SAAS,CAAC,QAAQ,CACxB,gBAAeJ,IAAI,CAAG,MAAM,CAAG,OAAS;AAAA,CACxC,gBAAc,iBAAkB;AAAA,CAChC,aAAW,oBAAqB;AAAA,CAAAD,QAAA,cAEhCN,IAAA,QACEa,GAAG,CAAEf,KAAM,CACXa,SAAS,UAAAG,MAAA,CAAWP,IAAI,CAAG,MAAM,CAAG,EAAE,CAAI;AAAA,CAC1CQ,GAAG,CAAC,kBAAkB,CACvB,CAAC,CACI,CAAC,EACN,CAAC,cAENb,KAAA,QACEc,EAAE,CAAC,iBACH;AAAA,CACAL,SAAS,CAAEJ,IAAI,CAAG,sBAAsB,CAAG,sBAC3C;AAAA,CACAU,GAAG,CAAEP,UAAW,CAChBQ,KAAK,CACHX,IAAI,CACA,CAAEY,MAAM,CAAET,UAAU,CAACU,OAAO,CAACC,YAAY,CAAG,IAAK,CAAE;AAAA,CACnD,CAAEF,MAAM,CAAE,KAAM,CAAE;AACvB,CAAAb,QAAA,eAEDN,IAAA,QAAKW,SAAS,CAAC,kBAAkB,CAAAL,QAAA,CAAEA,QAAQ,CAAM,CAAC,IAAC,EAChD,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAH,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}